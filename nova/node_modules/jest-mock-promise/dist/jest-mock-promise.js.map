{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 63d5c2ecea8b56f135d7","webpack:///jest-mock-promise.js","webpack:///./lib/jest-mock-promise.ts","webpack:///./lib/jest-mock-promise-types.ts"],"names":["root","factory","exports","module","define","amd","self","this","__webpack_require__","moduleId","installedModules","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","value","jest_mock_promise_types_1","JestMockPromise","callbackFn","handlers","handlerIx","state","PromiseState","pending","resolveFn","bind","rejectFn","data","resolved","err","maxIx","length","el","catch","finally","callFinally","then","ex","rejected","returnedValue","callNextThen","onFulfilled","onRejected","x","push","onFinally","resolve","reject","console","warn","setTimeout","default"],"mappings":"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","file":"jest-mock-promise.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"jest-mock-promise\"] = factory();\n\telse\n\t\troot[\"jest-mock-promise\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 63d5c2ecea8b56f135d7","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"jest-mock-promise\"] = factory();\n\telse\n\t\troot[\"jest-mock-promise\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * Synchronous Promise, which gets settled (resolved or settled) in a synchronous manner.\n *\n * `JestMockPromise` was written to simplify unit testing mocking (i.e. in [Jest](https://facebook.github.io/jest/) )\n *\n * In order to simplify synchronious promise settling two additional methods\n * were added to the promise instance:\n *   - `resolve` = forces the given promise to be resolved right away\n *   - `reject` = forces the given promise to be rejected right away\n *\n * By using these methods, we can write something like (provided that the Promise is mocked):\n *\n *    let promise = ExternalComponent.doAyncWork();\n *    promise.resolve({ label: 'this is some mock data' });\n *\n * @author   knee-cola<nikola.derezic@gmail.com>\n * @license  @license MIT License, http://www.opensource.org/licenses/MIT\n *\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar jest_mock_promise_types_1 = __webpack_require__(1);\nvar JestMockPromise = /** @class */ (function () {\n    function JestMockPromise(callbackFn) {\n        this.handlers = [];\n        this.handlerIx = 0;\n        this.state = jest_mock_promise_types_1.PromiseState.pending;\n        // if given, calling the given function\n        if (callbackFn) {\n            callbackFn(this.resolveFn.bind(this), this.rejectFn.bind(this));\n        }\n    }\n    /**\n     * Resolves the given promise\n     * @param value data which should be passed to `then` handler functions\n     */\n    JestMockPromise.prototype.resolveFn = function (value) {\n        this.data = value;\n        this.state = jest_mock_promise_types_1.PromiseState.resolved;\n        this.err = void 0;\n        for (var maxIx = this.handlers.length; this.handlerIx < maxIx; this.handlerIx++) {\n            var el = this.handlers[this.handlerIx];\n            // stop the execution at first `catch` handler you run into\n            if (el.catch || el.finally) {\n                this.callFinally();\n                return;\n            }\n            try {\n                // calling a `then` handler\n                value = el.then(value);\n            }\n            catch (ex) {\n                // in case `then` or a `finally` handler throws an error\n                // > pass it down to a first `catch` handler\n                this.handlerIx++;\n                this.rejectFn(ex);\n            }\n        }\n        ;\n    };\n    /**\n     * Rejects the given promise\n     * @param err error object which is to be passed as a param to `catch` function\n     */\n    JestMockPromise.prototype.rejectFn = function (err) {\n        this.state = jest_mock_promise_types_1.PromiseState.rejected;\n        this.err = err;\n        // find the first `catch` handler and call it\n        for (var maxIx = this.handlers.length; this.handlerIx < maxIx; this.handlerIx++) {\n            var el = this.handlers[this.handlerIx], returnedValue;\n            if (el.catch) {\n                try {\n                    returnedValue = el.catch(err);\n                    // try executing `then`/`finally` handlers which follow\n                    this.handlerIx++;\n                    this.resolveFn(returnedValue);\n                    // stop the execution as soon as you run into a first catch element\n                    break;\n                }\n                catch (ex) {\n                    // in an error was thrown within `catch` block\n                    // > pass it down to closest `catch` handler\n                    this.handlerIx++;\n                    this.rejectFn(ex);\n                    break; // the execution will continue from `rejectFn`\n                }\n            }\n            else if (el.finally) {\n                this.callFinally();\n            }\n        }\n        ;\n    };\n    /**\n     * Calls `finally` handlers\n     */\n    JestMockPromise.prototype.callFinally = function () {\n        /** is set to `true` after a successful `finally` call */\n        var callNextThen = false;\n        // find the first `finally` and call it\n        for (var maxIx = this.handlers.length; this.handlerIx < maxIx; this.handlerIx++) {\n            var el = this.handlers[this.handlerIx];\n            try {\n                if (el.finally) {\n                    // calling a `finally` handler\n                    el.finally(); // finally doesn't receive any data\n                    callNextThen = true; // if `then` is next - call it\n                }\n                else if (el.then && callNextThen) {\n                    // if you run into `then` right after finally > let the dedicated handler process it\n                    this.resolveFn();\n                    break; // the execution will continue from `resolveFn`\n                }\n                else if (el.catch) {\n                    callNextThen = false;\n                    continue; // skipping `catch` and search for the next `finally`\n                }\n            }\n            catch (ex) {\n                // in case `then` or a `finally` handler throws an error\n                // > pass it down to a first `catch` handler\n                this.handlerIx++;\n                this.rejectFn(ex);\n                break; // the execution will continue from `rejectFn`\n            }\n        }\n    };\n    /**\n     * Appends fulfillment and rejection handlers to the promise,\n     * and returns a new promise resolving to the return value of\n     * the called handler, or to its original settled value if the\n     * promise was not handled (i.e. if the relevant handler\n     * onFulfilled or onRejected is not a function).\n     * @param onFulfilled fulfillment handler function\n     * @param onRejected rejection handler function\n     */\n    JestMockPromise.prototype.then = function (onFulfilled, onRejected) {\n        if (typeof onFulfilled !== 'function') {\n            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then\n            // \"onFulfilled: A Function called if the Promise is fulfilled.\n            // This function has one argument, the fulfillment value.\n            // If it is not a function, it is internally replaced with an\n            // \"Identity\" function (it returns the received argument)\"\n            onFulfilled = function (x) { return x; };\n        }\n        // if the promise is already settled (resolved or rejected)\n        // > call the apropriate handler\n        switch (this.state) {\n            case jest_mock_promise_types_1.PromiseState.rejected:\n                if (onRejected) {\n                    onRejected(this.err);\n                }\n                break;\n            case jest_mock_promise_types_1.PromiseState.resolved:\n                onFulfilled(this.data);\n                break;\n            default:\n                this.handlers.push({ then: onFulfilled });\n                if (onRejected) {\n                    this.handlers.push({ catch: onRejected });\n                }\n        }\n        return (this);\n    };\n    /**\n     * Appends a rejection handler callback to the promise,\n     * and returns a new promise resolving to the return\n     * value of the callback if it is called, or to its\n     * original fulfillment value if the promise is instead\n     * fulfilled.\n     * @param onRejected rejection handler function\n     */\n    JestMockPromise.prototype.catch = function (onRejected) {\n        // if the promise is already rejected\n        // > call the handler right away\n        if (this.state === jest_mock_promise_types_1.PromiseState.rejected) {\n            onRejected(this.err);\n        }\n        else {\n            this.handlers.push({ catch: onRejected });\n        }\n        return (this);\n    };\n    /**\n     * Appends a finally handler callback to the promise\n     * @param onFinally finally handler function\n     */\n    JestMockPromise.prototype.finally = function (onFinally) {\n        // if the promise is already resolved or rejected\n        // > call the handler right away\n        if (this.state !== jest_mock_promise_types_1.PromiseState.pending) {\n            onFinally();\n        }\n        else {\n            this.handlers.push({ finally: onFinally });\n        }\n        return (this);\n    };\n    /**\n     * Resolves the promise with the given promise data.\n     * This is a non-standard method, which should be the last\n     * one to be called, after all the fulfillment and rejection\n     * handlers have been registered.\n     * @param {*} data\n     */\n    JestMockPromise.prototype.resolve = function (data) {\n        this.resolveFn(data);\n    };\n    /**\n     * Rejects the promise with the given promise with the given error object.\n     * This is a non-standard method, which should be the last\n     * one to be called, after all the fulfillment and rejection\n     * handlers have been registered.\n     * @param {*} data\n     */\n    JestMockPromise.prototype.reject = function (err) {\n        this.rejectFn(err);\n    };\n    /**\n     * Creates a resolved promise with the given data\n     * @param data data which should be passed to `then` handler functions\n     */\n    JestMockPromise.resolve = function (data) {\n        console.warn('a promise created via `JestMockPromise.resolve` will be executed async ... for sync execution call `resolve` method on an instance of `Promise`');\n        return (new JestMockPromise(function (resolve, reject) {\n            setTimeout(resolve(data), 0);\n        }));\n    };\n    /**\n     * Creates a rejected promise with the given data\n     * @param err error object which is to be passed as a param to `catch` function\n     */\n    JestMockPromise.reject = function (err) {\n        console.warn('a promise created via `JestMockPromise.reject` will be executed async ... for sync execution call `reject` method on an instance of `Promise`');\n        return (new JestMockPromise(function (resolve, reject) {\n            setTimeout(reject(err), 0);\n        }));\n    };\n    return JestMockPromise;\n}());\nexports.default = JestMockPromise;\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar PromiseState;\n(function (PromiseState) {\n    PromiseState[PromiseState[\"pending\"] = 0] = \"pending\";\n    PromiseState[PromiseState[\"resolved\"] = 1] = \"resolved\";\n    PromiseState[PromiseState[\"rejected\"] = 2] = \"rejected\";\n})(PromiseState || (PromiseState = {}));\nexports.PromiseState = PromiseState;\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// jest-mock-promise.js","\"use strict\";\n/**\n * Synchronous Promise, which gets settled (resolved or settled) in a synchronous manner.\n *\n * `JestMockPromise` was written to simplify unit testing mocking (i.e. in [Jest](https://facebook.github.io/jest/) )\n *\n * In order to simplify synchronious promise settling two additional methods\n * were added to the promise instance:\n *   - `resolve` = forces the given promise to be resolved right away\n *   - `reject` = forces the given promise to be rejected right away\n *\n * By using these methods, we can write something like (provided that the Promise is mocked):\n *\n *    let promise = ExternalComponent.doAyncWork();\n *    promise.resolve({ label: 'this is some mock data' });\n *\n * @author   knee-cola<nikola.derezic@gmail.com>\n * @license  @license MIT License, http://www.opensource.org/licenses/MIT\n *\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar jest_mock_promise_types_1 = require(\"./jest-mock-promise-types\");\nvar JestMockPromise = /** @class */ (function () {\n    function JestMockPromise(callbackFn) {\n        this.handlers = [];\n        this.handlerIx = 0;\n        this.state = jest_mock_promise_types_1.PromiseState.pending;\n        // if given, calling the given function\n        if (callbackFn) {\n            callbackFn(this.resolveFn.bind(this), this.rejectFn.bind(this));\n        }\n    }\n    /**\n     * Resolves the given promise\n     * @param value data which should be passed to `then` handler functions\n     */\n    JestMockPromise.prototype.resolveFn = function (value) {\n        this.data = value;\n        this.state = jest_mock_promise_types_1.PromiseState.resolved;\n        this.err = void 0;\n        for (var maxIx = this.handlers.length; this.handlerIx < maxIx; this.handlerIx++) {\n            var el = this.handlers[this.handlerIx];\n            // stop the execution at first `catch` handler you run into\n            if (el.catch || el.finally) {\n                this.callFinally();\n                return;\n            }\n            try {\n                // calling a `then` handler\n                value = el.then(value);\n            }\n            catch (ex) {\n                // in case `then` or a `finally` handler throws an error\n                // > pass it down to a first `catch` handler\n                this.handlerIx++;\n                this.rejectFn(ex);\n            }\n        }\n        ;\n    };\n    /**\n     * Rejects the given promise\n     * @param err error object which is to be passed as a param to `catch` function\n     */\n    JestMockPromise.prototype.rejectFn = function (err) {\n        this.state = jest_mock_promise_types_1.PromiseState.rejected;\n        this.err = err;\n        // find the first `catch` handler and call it\n        for (var maxIx = this.handlers.length; this.handlerIx < maxIx; this.handlerIx++) {\n            var el = this.handlers[this.handlerIx], returnedValue;\n            if (el.catch) {\n                try {\n                    returnedValue = el.catch(err);\n                    // try executing `then`/`finally` handlers which follow\n                    this.handlerIx++;\n                    this.resolveFn(returnedValue);\n                    // stop the execution as soon as you run into a first catch element\n                    break;\n                }\n                catch (ex) {\n                    // in an error was thrown within `catch` block\n                    // > pass it down to closest `catch` handler\n                    this.handlerIx++;\n                    this.rejectFn(ex);\n                    break; // the execution will continue from `rejectFn`\n                }\n            }\n            else if (el.finally) {\n                this.callFinally();\n            }\n        }\n        ;\n    };\n    /**\n     * Calls `finally` handlers\n     */\n    JestMockPromise.prototype.callFinally = function () {\n        /** is set to `true` after a successful `finally` call */\n        var callNextThen = false;\n        // find the first `finally` and call it\n        for (var maxIx = this.handlers.length; this.handlerIx < maxIx; this.handlerIx++) {\n            var el = this.handlers[this.handlerIx];\n            try {\n                if (el.finally) {\n                    // calling a `finally` handler\n                    el.finally(); // finally doesn't receive any data\n                    callNextThen = true; // if `then` is next - call it\n                }\n                else if (el.then && callNextThen) {\n                    // if you run into `then` right after finally > let the dedicated handler process it\n                    this.resolveFn();\n                    break; // the execution will continue from `resolveFn`\n                }\n                else if (el.catch) {\n                    callNextThen = false;\n                    continue; // skipping `catch` and search for the next `finally`\n                }\n            }\n            catch (ex) {\n                // in case `then` or a `finally` handler throws an error\n                // > pass it down to a first `catch` handler\n                this.handlerIx++;\n                this.rejectFn(ex);\n                break; // the execution will continue from `rejectFn`\n            }\n        }\n    };\n    /**\n     * Appends fulfillment and rejection handlers to the promise,\n     * and returns a new promise resolving to the return value of\n     * the called handler, or to its original settled value if the\n     * promise was not handled (i.e. if the relevant handler\n     * onFulfilled or onRejected is not a function).\n     * @param onFulfilled fulfillment handler function\n     * @param onRejected rejection handler function\n     */\n    JestMockPromise.prototype.then = function (onFulfilled, onRejected) {\n        if (typeof onFulfilled !== 'function') {\n            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then\n            // \"onFulfilled: A Function called if the Promise is fulfilled.\n            // This function has one argument, the fulfillment value.\n            // If it is not a function, it is internally replaced with an\n            // \"Identity\" function (it returns the received argument)\"\n            onFulfilled = function (x) { return x; };\n        }\n        // if the promise is already settled (resolved or rejected)\n        // > call the apropriate handler\n        switch (this.state) {\n            case jest_mock_promise_types_1.PromiseState.rejected:\n                if (onRejected) {\n                    onRejected(this.err);\n                }\n                break;\n            case jest_mock_promise_types_1.PromiseState.resolved:\n                onFulfilled(this.data);\n                break;\n            default:\n                this.handlers.push({ then: onFulfilled });\n                if (onRejected) {\n                    this.handlers.push({ catch: onRejected });\n                }\n        }\n        return (this);\n    };\n    /**\n     * Appends a rejection handler callback to the promise,\n     * and returns a new promise resolving to the return\n     * value of the callback if it is called, or to its\n     * original fulfillment value if the promise is instead\n     * fulfilled.\n     * @param onRejected rejection handler function\n     */\n    JestMockPromise.prototype.catch = function (onRejected) {\n        // if the promise is already rejected\n        // > call the handler right away\n        if (this.state === jest_mock_promise_types_1.PromiseState.rejected) {\n            onRejected(this.err);\n        }\n        else {\n            this.handlers.push({ catch: onRejected });\n        }\n        return (this);\n    };\n    /**\n     * Appends a finally handler callback to the promise\n     * @param onFinally finally handler function\n     */\n    JestMockPromise.prototype.finally = function (onFinally) {\n        // if the promise is already resolved or rejected\n        // > call the handler right away\n        if (this.state !== jest_mock_promise_types_1.PromiseState.pending) {\n            onFinally();\n        }\n        else {\n            this.handlers.push({ finally: onFinally });\n        }\n        return (this);\n    };\n    /**\n     * Resolves the promise with the given promise data.\n     * This is a non-standard method, which should be the last\n     * one to be called, after all the fulfillment and rejection\n     * handlers have been registered.\n     * @param {*} data\n     */\n    JestMockPromise.prototype.resolve = function (data) {\n        this.resolveFn(data);\n    };\n    /**\n     * Rejects the promise with the given promise with the given error object.\n     * This is a non-standard method, which should be the last\n     * one to be called, after all the fulfillment and rejection\n     * handlers have been registered.\n     * @param {*} data\n     */\n    JestMockPromise.prototype.reject = function (err) {\n        this.rejectFn(err);\n    };\n    /**\n     * Creates a resolved promise with the given data\n     * @param data data which should be passed to `then` handler functions\n     */\n    JestMockPromise.resolve = function (data) {\n        console.warn('a promise created via `JestMockPromise.resolve` will be executed async ... for sync execution call `resolve` method on an instance of `Promise`');\n        return (new JestMockPromise(function (resolve, reject) {\n            setTimeout(resolve(data), 0);\n        }));\n    };\n    /**\n     * Creates a rejected promise with the given data\n     * @param err error object which is to be passed as a param to `catch` function\n     */\n    JestMockPromise.reject = function (err) {\n        console.warn('a promise created via `JestMockPromise.reject` will be executed async ... for sync execution call `reject` method on an instance of `Promise`');\n        return (new JestMockPromise(function (resolve, reject) {\n            setTimeout(reject(err), 0);\n        }));\n    };\n    return JestMockPromise;\n}());\nexports.default = JestMockPromise;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/jest-mock-promise.ts\n// module id = 0\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar PromiseState;\n(function (PromiseState) {\n    PromiseState[PromiseState[\"pending\"] = 0] = \"pending\";\n    PromiseState[PromiseState[\"resolved\"] = 1] = \"resolved\";\n    PromiseState[PromiseState[\"rejected\"] = 2] = \"rejected\";\n})(PromiseState || (PromiseState = {}));\nexports.PromiseState = PromiseState;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/jest-mock-promise-types.ts\n// module id = 1\n// module chunks = 0"],"sourceRoot":""}